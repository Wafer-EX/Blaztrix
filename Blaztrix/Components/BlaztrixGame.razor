@using Blaztrix.Core;
@using Blaztrix.Core.Enums
@using Blaztrix.Models
@using Blaztrix.Services
@using Microsoft.Extensions.Localization

@inject BlaztrixStateContainer BlaztrixState
@inject IStringLocalizer<App> Localize

@if (BlaztrixState.CurrentState != CurrentState.NotInitialized)
{
    <PageContainer EnableContentContainer=false>
        <div id="session-container">
            <div id="session-left-container" tabindex="0" @ref="_fieldContainer" @onclick="() => _fieldContainer.FocusAsync()" @onkeydown="KeyHandler">
                <p hidden="@(!BlaztrixState.Session.FieldState.IsBlocked)">
                    @(BlaztrixState.Session.IsLost ? Localize["You are lost"] : Localize["Paused"])
                </p>
                <BlaztrixField FieldState="BlaztrixState.Session.FieldState" />
            </div>
            <div id="session-right-container">
                <div id="session-info-container">
                    <table>
                        <tr>
                            <th align="left">@Localize["Score"]: </th>
                            <td align="right">@BlaztrixState.Session.Score</td>
                        </tr>
                        <tr>
                            <th align="left">@Localize["Speed"]: </th>
                            <td align="right">@BlaztrixState.Session.Speed</td>
                        </tr>
                    </table>
                </div>
                <div id="session-control-container">
                    <div class="button-container">
                        <button class="button" hidden="@(!BlaztrixState.Session.IsLost)" @onclick="Restart">
                            @Localize["Restart"]
                        </button>
                        <button class="button" hidden="@BlaztrixState.Session.IsLost" @onclick="Pause">
                            @(BlaztrixState.Session.FieldState.IsBlocked ? Localize["Continue"] : Localize["Pause"])
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </PageContainer>
}
else
{
    <PageContainer Title="@Localize["Initial Blaztrix settings"]">
       <div id="session-settings-container">
            <EditForm class="form" Model="_fieldModel" OnValidSubmit="@ApplySettings">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="input-text-container">
                    <InputNumber @bind-Value="_fieldModel.Width" class="input-text" placeholder="@Localize["Width"]" />
                </div>
                <div class="input-text-container">
                    <InputNumber @bind-Value="_fieldModel.Height" class="input-text" placeholder="@Localize["Height"]" />
                </div>
                <div class=button-container>
                    <input class="button" type="submit" value="@Localize["Apply"]" />
                </div>
            </EditForm>
       </div>
    </PageContainer>
}

@code {
    private ElementReference _fieldContainer;
    private BlaztrixFieldModel _fieldModel = new();

    private void KeyHandler(KeyboardEventArgs e)
    {
        if (BlaztrixState.Session != null)
        {
            switch (e.Key)
            {
                case "ArrowLeft": BlaztrixState.Session.Control(Directions.Left); break;
                case "ArrowRight": BlaztrixState.Session.Control(Directions.Right); break;
                case "ArrowDown": BlaztrixState.Session.Control(Directions.Down); break;
                case " ": BlaztrixState.Session.Control(Directions.Around); break;
            }
        }
    }

    private void ApplySettings()
    {
        int newFieldWidth = _fieldModel.Width ?? throw new NullReferenceException();
        int newFieldHeight = _fieldModel.Height ?? throw new NullReferenceException();

        BlaztrixState.Session = new Session(newFieldWidth, newFieldHeight, 1);
        BlaztrixState.Session.FieldUpdated += StateHasChanged;
        BlaztrixState.Session.AutoMoved += () => _fieldContainer.FocusAsync();
        BlaztrixState.Session.StartInBackground();
    }

    private void Pause()
    {
        if (BlaztrixState.Session != null)
        {
            if (BlaztrixState.CurrentState == CurrentState.Paused)
                BlaztrixState.Session.StartInBackground();
            else
                BlaztrixState.Session.Stop();
        }
    }

    private void Restart() => BlaztrixState.Session = null;
}